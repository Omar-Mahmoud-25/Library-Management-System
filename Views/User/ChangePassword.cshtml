@model LibraryManagementSystem.Models.ChangePasswordViewModel

@{
    ViewData["Title"] = "Change Password";
}

<style>
    .password-container {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 2rem;
        margin-top: 2rem;
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
    }
    
    .password-header {
        text-align: center;
        margin-bottom: 2rem;
        padding-bottom: 1.5rem;
        border-bottom: 2px solid rgba(0, 255, 136, 0.3);
    }
    
    .form-floating > label {
        color: #ccc;
    }
    
    .form-control:focus {
        border-color: #00ff88;
        box-shadow: 0 0 0 0.2rem rgba(0, 255, 136, 0.25);
    }
    
    .password-strength {
        margin-top: 0.5rem;
        font-size: 0.8rem;
    }
    
    .strength-weak { color: #dc3545; }
    .strength-medium { color: #ffc107; }
    .strength-strong { color: #28a745; }
</style>

<div class="container">
    <div class="password-container">
        <div class="password-header">
            <h2 class="text-light mb-2">
                <i class="bi bi-shield-lock"></i> Change Password
            </h2>
            <p class="text-muted mb-0">Update your account password to keep it secure</p>
        </div>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="bi bi-check-circle"></i> @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        <form asp-action="ChangePassword" method="post">
            @Html.AntiForgeryToken()
            
            <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

            <div class="mb-3">
                <div class="form-floating">
                    <input asp-for="CurrentPassword" class="form-control" id="currentPassword" placeholder="Current Password" autocomplete="current-password" />
                    <label asp-for="CurrentPassword">
                        <i class="bi bi-lock"></i> Current Password
                    </label>
                    <span asp-validation-for="CurrentPassword" class="text-danger"></span>
                </div>
            </div>

            <div class="mb-3">
                <div class="form-floating">
                    <input asp-for="NewPassword" class="form-control" id="newPassword" placeholder="New Password" autocomplete="new-password" />
                    <label asp-for="NewPassword">
                        <i class="bi bi-shield-plus"></i> New Password
                    </label>
                    <span asp-validation-for="NewPassword" class="text-danger"></span>
                </div>
                <div id="passwordStrength" class="password-strength"></div>
            </div>

            <div class="mb-4">
                <div class="form-floating">
                    <input asp-for="ConfirmPassword" class="form-control" id="confirmPassword" placeholder="Confirm New Password" autocomplete="new-password" />
                    <label asp-for="ConfirmPassword">
                        <i class="bi bi-shield-check"></i> Confirm New Password
                    </label>
                    <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                </div>
                <div id="passwordMatch" class="password-strength"></div>
            </div>

            <div class="d-flex gap-3">
                <button type="submit" class="btn btn-primary flex-fill">
                    <i class="bi bi-check-circle"></i> Change Password
                </button>
                <a asp-action="Profile" class="btn btn-secondary flex-fill">
                    <i class="bi bi-x-circle"></i> Cancel
                </a>
            </div>
        </form>

        <div class="mt-4 p-3" style="background: rgba(255, 255, 255, 0.05); border-radius: 8px;">
            <h6 class="text-light mb-2">
                <i class="bi bi-info-circle"></i> Password Requirements
            </h6>
            <ul class="text-muted mb-0" style="font-size: 0.85rem;">
                <li>At least 6 characters long</li>
                <li>Mix of uppercase and lowercase letters</li>
                <li>Include numbers and special characters</li>
                <li>Avoid common passwords</li>
            </ul>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        function checkPasswordStrength(password) {
            let strength = 0;
            let feedback = [];

            if (password.length >= 8) strength++;
            else feedback.push("at least 8 characters");

            if (/[a-z]/.test(password)) strength++;
            else feedback.push("lowercase letters");

            if (/[A-Z]/.test(password)) strength++;
            else feedback.push("uppercase letters");

            if (/[0-9]/.test(password)) strength++;
            else feedback.push("numbers");

            if (/[^A-Za-z0-9]/.test(password)) strength++;
            else feedback.push("special characters");

            return { strength, feedback };
        }

        document.getElementById('newPassword').addEventListener('input', function() {
            const password = this.value;
            const strengthDiv = document.getElementById('passwordStrength');
            
            if (password.length === 0) {
                strengthDiv.innerHTML = '';
                return;
            }

            const result = checkPasswordStrength(password);
            let strengthText = '';
            let strengthClass = '';

            if (result.strength <= 2) {
                strengthText = 'Weak';
                strengthClass = 'strength-weak';
            } else if (result.strength <= 4) {
                strengthText = 'Medium';
                strengthClass = 'strength-medium';
            } else {
                strengthText = 'Strong';
                strengthClass = 'strength-strong';
            }

            strengthDiv.innerHTML = `<span class="${strengthClass}">Password strength: ${strengthText}</span>`;
            
            if (result.feedback.length > 0) {
                strengthDiv.innerHTML += `<br><small>Add: ${result.feedback.join(', ')}</small>`;
            }
        });

        document.getElementById('confirmPassword').addEventListener('input', function() {
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = this.value;
            const matchDiv = document.getElementById('passwordMatch');
            
            if (confirmPassword.length === 0) {
                matchDiv.innerHTML = '';
                return;
            }

            if (newPassword === confirmPassword) {
                matchDiv.innerHTML = '<span class="strength-strong">Passwords match</span>';
            } else {
                matchDiv.innerHTML = '<span class="strength-weak">Passwords do not match</span>';
            }
        });
    </script>
}