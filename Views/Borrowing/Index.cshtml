@using LibraryManagementSystem.Entities
@model IEnumerable<Borrowing>

@{
    ViewData["Title"] = "Borrowings";
    var isAdmin = ViewBag.IsAdmin as bool? ?? false;
    var selectedUserId = ViewBag.SelectedUserId as int?;
    var selectedBookId = ViewBag.SelectedBookId as int?;
    var selectedStatus = ViewBag.SelectedStatus as string ?? "";
    var searchTerm = ViewBag.SearchTerm as string ?? "";
}

<style>
    .top-links {
        display: flex;
        gap: 30px;
        margin-top: 20px;
        margin-bottom: 20px;
        font-size: 20px;
    }

    .top-links a {
        text-decoration: none;
        color: #ccc;
        position: relative;
        font-weight: 500;
        transition: 0.3s;
    }

    .top-links a:hover {
        color: white;
    }

    .top-links a.active::after {
        content: "";
        position: absolute;
        bottom: -5px;
        left: 0;
        width: 100%;
        height: 2px;
        background-color: #00ff88;
    }

    .stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin: 30px 0;
    }

    .stat-card {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(0, 255, 136, 0.3);
        border-radius: 15px;
        padding: 1.5rem;
        text-align: center;
        transition: transform 0.3s ease;
    }

    .stat-card:hover {
        transform: translateY(-5px);
    }

    .stat-card h3 {
        color: #00ff88;
        margin-bottom: 10px;
        font-size: 1rem;
    }

    .stat-card .number {
        font-size: 2.5rem;
        font-weight: bold;
        color: #fff;
        display: block;
    }

    .filter-section {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

    .status-badge {
        font-size: 0.8rem;
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
    }

    .action-btn {
        border: none;
        padding: 0.4rem 0.8rem;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.8rem;
        transition: all 0.3s;
    }

    .overdue-row {
        background-color: rgba(220, 53, 69, 0.1) !important;
    }
</style>

<div class="top-links">
    @if (isAdmin)
    {
        <a asp-controller="User" asp-action="Index" class="@(ViewData["Title"]?.ToString() == "Users" ? "active" : "")">Users</a>
    }
    <a asp-controller="Borrowing" asp-action="Index" class="@(ViewData["Title"]?.ToString() == "Borrowings" ? "active" : "")">Borrowings</a>
    <a asp-controller="Book" asp-action="Index" class="@(ViewData["Title"]?.ToString() == "Books" ? "active" : "")">Books</a>
</div>

<!-- Statistics Cards -->
<div class="stats">
    <div class="stat-card">
        <h3>Active Borrowings</h3>
        <span class="number">@ViewBag.BorrowedCount</span>
    </div>
    <div class="stat-card">
        <h3>Returned Books</h3>
        <span class="number">@ViewBag.ReturnedCount</span>
    </div>
    <div class="stat-card">
        <h3>Overdue Items</h3>
        <span class="number text-danger">@ViewBag.OverdueCount</span>
    </div>
    <div class="stat-card">
        <h3>Total Borrowings</h3>
        <span class="number">@(ViewBag.BorrowedCount + ViewBag.ReturnedCount)</span>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle"></i> @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle"></i> @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Filter Section -->
<div class="filter-section">
    <h5 class="text-light mb-3">
        <i class="bi bi-funnel"></i> Filter Borrowings
    </h5>
    
    <form method="get" class="row g-3">
        <div class="col-md-3">
            <label for="statusSelect" class="form-label text-light">Status</label>
            <select name="status" id="statusSelect" class="form-select">
                <option value="">All Status</option>
                <option value="active" selected="@(selectedStatus == "active")">Active</option>
                <option value="returned" selected="@(selectedStatus == "returned")">Returned</option>
                <option value="overdue" selected="@(selectedStatus == "overdue")">Overdue</option>
            </select>
        </div>
        <div class="col-md-6">
            <label for="searchInput" class="form-label text-light">Search</label>
            <input name="search" id="searchInput" type="text" class="form-control" 
                   placeholder="Search by user name, book title, or author..." value="@searchTerm" />
        </div>
        <div class="col-md-3 d-flex align-items-end">
            <button type="submit" class="btn btn-primary w-100">
                <i class="bi bi-search"></i> Filter
            </button>
        </div>
    </form>
    
    @if (!string.IsNullOrEmpty(selectedStatus) || !string.IsNullOrEmpty(searchTerm))
    {
        <div class="mt-3">
            <a asp-action="Index" class="btn btn-outline-light btn-sm">
                <i class="bi bi-x-circle"></i> Clear Filters
            </a>
            <span class="text-light ms-2">
                @if (!string.IsNullOrEmpty(selectedStatus))
                {
                    <span>Status: <strong class="text-warning">@selectedStatus.ToUpperInvariant()</strong></span>
                }
                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    <span class="ms-2">Search: <strong class="text-info">"@searchTerm"</strong></span>
                }
            </span>
        </div>
    }
</div>

<!-- Quick Actions -->
@if (isAdmin)
{
    <div class="d-flex gap-2 mb-3">
        <a asp-action="Overdue" class="btn btn-outline-danger">
            <i class="bi bi-exclamation-triangle"></i> View Overdue (@ViewBag.OverdueCount)
        </a>
        <button class="btn btn-outline-info" onclick="refreshStats()">
            <i class="bi bi-arrow-clockwise"></i> Refresh Stats
        </button>
    </div>
}

@if (!Model.Any())
{
    <div class="alert alert-info mt-5">
        <h4 class="alert-heading">
            <i class="bi bi-info-circle"></i> No borrowings found!
        </h4>
        @if (!string.IsNullOrEmpty(selectedStatus) || !string.IsNullOrEmpty(searchTerm))
        {
            <p class="mb-0">No borrowings match your current filters. Try adjusting your search criteria.</p>
        }
        else
        {
            <p class="mb-0">No borrowings have been recorded yet.</p>
        }
    </div>
}
else
{
    <div class="mt-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="text-light mb-0">Found @Model.Count() borrowing(s)</h5>
        </div>
        
        <div class="table-responsive">
            <table class="table table-dark table-striped">
                <thead class="table-primary">
                    <tr>
                        <th><i class="bi bi-book"></i> Book</th>
                        <th><i class="bi bi-person"></i> User</th>
                        <th><i class="bi bi-calendar-plus"></i> Borrowed</th>
                        <th><i class="bi bi-calendar-x"></i> Due Date</th>
                        <th><i class="bi bi-calendar-check"></i> Returned</th>
                        <th><i class="bi bi-flag"></i> Status</th>
                        @if (isAdmin)
                        {
                            <th><i class="bi bi-gear"></i> Actions</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var borrowing in Model)
                    {
                        <tr class="@(borrowing.IsOverdue ? "overdue-row" : "")">
                            <td>
                                <strong>@borrowing.Book?.Title</strong>
                                <br />
                                <small class="text-muted">by @borrowing.Book?.Author</small>
                            </td>
                            <td>
                                <strong>@borrowing.User?.FullName</strong>
                                <br />
                                <small class="text-muted">@borrowing.User?.Email</small>
                            </td>
                            <td>@borrowing.BorrowedDate.ToString("MMM dd, yyyy")</td>
                            <td>
                                @borrowing.DueDate.ToString("MMM dd, yyyy")
                                @if (borrowing.IsOverdue && !borrowing.IsReturned)
                                {
                                    <br />
                                    <small class="text-danger">
                                        <i class="bi bi-exclamation-triangle"></i>
                                        @borrowing.DaysOverdue day(s) overdue
                                    </small>
                                }
                            </td>
                            <td>
                                @if (borrowing.IsReturned)
                                {
                                    <span>@borrowing.ReturnedDate?.ToString("MMM dd, yyyy")</span>
                                }
                                else
                                {
                                    <span class="text-muted">Not returned</span>
                                }
                            </td>
                            <td>
                                @if (borrowing.IsReturned)
                                {
                                    <span class="badge bg-success status-badge">
                                        <i class="bi bi-check-circle"></i> Returned
                                    </span>
                                }
                                else if (borrowing.IsOverdue)
                                {
                                    <span class="badge bg-danger status-badge">
                                        <i class="bi bi-exclamation-triangle"></i> Overdue
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-warning text-dark status-badge">
                                        <i class="bi bi-clock"></i> Active
                                    </span>
                                }
                            </td>
                            @if (isAdmin)
                            {
                                <td>
                                    <div class="btn-group-vertical btn-group-sm">
                                        <a asp-action="Details" asp-route-id="@borrowing.Id" 
                                           class="btn btn-outline-info btn-sm" title="View Details">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@section Scripts {
    <script>
        function refreshStats() {
            fetch('/Borrowing/GetStatistics')
                .then(response => response.json())
                .then(data => {
                    document.querySelector('.stats .stat-card:nth-child(1) .number').textContent = data.borrowed;
                    document.querySelector('.stats .stat-card:nth-child(2) .number').textContent = data.returned;
                    document.querySelector('.stats .stat-card:nth-child(3) .number').textContent = data.overdue;
                    document.querySelector('.stats .stat-card:nth-child(4) .number').textContent = data.total;
                })
                .catch(error => console.error('Error refreshing stats:', error));
        }

        // Auto-refresh stats every 30 seconds
        setInterval(refreshStats, 30000);
    </script>
}
