@using LibraryManagementSystem.Entities
@model IEnumerable<Borrowing>

@{
    ViewData["Title"] = "Book Borrowing History";
    var bookTitle = ViewBag.BookTitle as string ?? "Unknown Book";
    var bookId = ViewBag.BookId as int? ?? 0;
    var totalBorrowings = Model.Count();
    var currentlyBorrowed = Model.Count(b => !b.IsReturned);
    var returnedBooks = Model.Count(b => b.IsReturned);
    var overdueBooks = Model.Count(b => b.IsOverdue);
}

<style>
    .book-history-container {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 2rem;
        margin-top: 2rem;
    }
    
    .book-header {
        text-align: center;
        margin-bottom: 2rem;
        padding-bottom: 1.5rem;
        border-bottom: 2px solid rgba(0, 255, 136, 0.3);
    }
    
    .stats-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin: 2rem 0;
    }
    
    .stat-card {
        background: rgba(0, 255, 136, 0.1);
        border: 1px solid rgba(0, 255, 136, 0.3);
        border-radius: 10px;
        padding: 1.5rem;
        text-align: center;
    }
    
    .stat-number {
        font-size: 2rem;
        font-weight: bold;
        color: #00ff88;
        display: block;
    }
    
    .stat-label {
        color: #ccc;
        font-size: 0.9rem;
        margin-top: 0.5rem;
    }
    
    .borrowing-item {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 10px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        border-left: 4px solid;
        transition: transform 0.3s ease;
    }
    
    .borrowing-item:hover {
        transform: translateX(5px);
    }
    
    .borrowing-item.returned {
        border-left-color: #28a745;
    }
    
    .borrowing-item.overdue {
        border-left-color: #dc3545;
        background: rgba(220, 53, 69, 0.1);
    }
    
    .borrowing-item.active {
        border-left-color: #ffc107;
    }
    
    .user-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, #00ff88, #00d4aa);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: #333;
        font-size: 1.2rem;
    }
</style>

<div class="container">
    <div class="book-history-container">
        <div class="book-header">
            <h1 class="text-light">
                <i class="bi bi-clock-history"></i> Borrowing History
            </h1>
            <h3 class="text-info">@bookTitle</h3>
            <p class="text-muted mb-0">Complete borrowing history for this book</p>
        </div>

        <!-- Statistics -->
        <div class="stats-row">
            <div class="stat-card">
                <span class="stat-number">@totalBorrowings</span>
                <div class="stat-label">Total Borrowings</div>
            </div>
            <div class="stat-card">
                <span class="stat-number text-warning">@currentlyBorrowed</span>
                <div class="stat-label">Currently Borrowed</div>
            </div>
            <div class="stat-card">
                <span class="stat-number text-success">@returnedBooks</span>
                <div class="stat-label">Returned</div>
            </div>
            <div class="stat-card">
                <span class="stat-number text-danger">@overdueBooks</span>
                <div class="stat-label">Overdue</div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="d-flex gap-2 mb-4">
            <a asp-controller="Book" asp-action="Details" asp-route-id="@bookId" class="btn btn-outline-primary">
                <i class="bi bi-book"></i> View Book Details
            </a>
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Back to All Borrowings
            </a>
            @if (overdueBooks > 0)
            {
                <a asp-action="Overdue" class="btn btn-outline-danger">
                    <i class="bi bi-exclamation-triangle"></i> View Overdue (@overdueBooks)
                </a>
            }
        </div>

        @if (!Model.Any())
        {
            <div class="text-center py-5">
                <i class="bi bi-book" style="font-size: 4rem; color: #ccc;"></i>
                <h3 class="text-light mt-3">No borrowing history</h3>
                <p class="text-muted">This book hasn't been borrowed yet.</p>
            </div>
        }
        else
        {
            <div class="row">
                @foreach (var borrowing in Model.OrderByDescending(b => b.BorrowedDate))
                {
                    <div class="col-12">
                        <div class="borrowing-item @(borrowing.IsReturned ? "returned" : (borrowing.IsOverdue ? "overdue" : "active"))">
                            <div class="row align-items-center">
                                <!-- User Avatar -->
                                <div class="col-md-1">
                                    <div class="user-avatar">
                                        @borrowing.User.FirstName.Substring(0, 1)@borrowing.User.LastName.Substring(0, 1)
                                    </div>
                                </div>
                                
                                <!-- User Information -->
                                <div class="col-md-4">
                                    <h5 class="text-light mb-1">@borrowing.User.FullName</h5>
                                    <p class="text-muted mb-0">@borrowing.User.Email</p>
                                    <small class="text-muted">@borrowing.User.PhoneNumber</small>
                                </div>
                                
                                <!-- Borrowing Timeline -->
                                <div class="col-md-4">
                                    <div class="mb-1">
                                        <small class="text-muted">
                                            <i class="bi bi-calendar-plus"></i> Borrowed: 
                                        </small>
                                        <span class="text-light">@borrowing.BorrowedDate.ToString("MMM dd, yyyy")</span>
                                    </div>
                                    <div class="mb-1">
                                        <small class="text-muted">
                                            <i class="bi bi-calendar-x"></i> Due: 
                                        </small>
                                        <span class="text-light">@borrowing.DueDate.ToString("MMM dd, yyyy")</span>
                                    </div>
                                    @if (borrowing.IsReturned)
                                    {
                                        <div>
                                            <small class="text-muted">
                                                <i class="bi bi-calendar-check"></i> Returned: 
                                            </small>
                                            <span class="text-success">@borrowing.ReturnedDate?.ToString("MMM dd, yyyy")</span>
                                        </div>
                                    }
                                </div>
                                
                                <!-- Status -->
                                <div class="col-md-2 text-center">
                                    @if (borrowing.IsReturned)
                                    {
                                        <span class="badge bg-success p-2">
                                            <i class="bi bi-check-circle"></i><br />
                                            Returned
                                        </span>
                                        @if (borrowing.ReturnedDate > borrowing.DueDate)
                                        {
                                            <br />
                                            <small class="text-warning mt-1">
                                                Late by @((borrowing.ReturnedDate.Value - borrowing.DueDate).Days) day(s)
                                            </small>
                                        }
                                        else
                                        {
                                            <br />
                                            <small class="text-success mt-1">
                                                On time âœ…
                                            </small>
                                        }
                                    }
                                    else if (borrowing.IsOverdue)
                                    {
                                        <span class="badge bg-danger p-2">
                                            <i class="bi bi-exclamation-triangle"></i><br />
                                            @borrowing.DaysOverdue day(s) overdue
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning text-dark p-2">
                                            <i class="bi bi-clock"></i><br />
                                            @((borrowing.DueDate - DateTime.Now).Days) days left
                                        </span>
                                    }
                                </div>
                                
                                <!-- Actions -->
                                <div class="col-md-1 text-end">
                                    <div class="btn-group-vertical">
                                        <a asp-action="Details" asp-route-id="@borrowing.Id" 
                                           class="btn btn-outline-info btn-sm mb-1" title="View Details">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        @if (!borrowing.IsReturned)
                                        {
                                            <form asp-action="ForceReturn" method="post" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="borrowingId" value="@borrowing.Id" />
                                                <button type="submit" class="btn btn-outline-success btn-sm" 
                                                        title="Force Return"
                                                        onclick="return confirm('Force return this book?')">
                                                    <i class="bi bi-arrow-return-left"></i>
                                                </button>
                                            </form>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Summary Information -->
            <div class="mt-4 p-3" style="background: rgba(255, 255, 255, 0.05); border-radius: 10px;">
                <h6 class="text-light mb-2">
                    <i class="bi bi-graph-up"></i> Borrowing Analytics
                </h6>
                <div class="row">
                    <div class="col-md-3">
                        <small class="text-muted">Average Duration:</small>
                        <div class="text-light">
                            @{
                                var returnedBorrowings = Model.Where(b => b.IsReturned).ToList();
                                if (returnedBorrowings.Any())
                                {
                                    var avgDays = returnedBorrowings.Average(b => (b.ReturnedDate.Value - b.BorrowedDate).Days);
                                    <span>@Math.Round(avgDays, 1) days</span>
                                }
                                else
                                {
                                    <span>N/A</span>
                                }
                            }
                        </div>
                    </div>
                    <div class="col-md-3">
                        <small class="text-muted">Most Recent:</small>
                        <div class="text-light">
                            @Model.OrderByDescending(b => b.BorrowedDate).First().BorrowedDate.ToString("MMM dd, yyyy")
                        </div>
                    </div>
                    <div class="col-md-3">
                        <small class="text-muted">On-Time Returns:</small>
                        <div class="text-light">
                            @{
                                if (returnedBorrowings.Any())
                                {
                                    var onTimeCount = returnedBorrowings.Count(b => b.ReturnedDate <= b.DueDate);
                                    var onTimePercentage = Math.Round((double)onTimeCount / returnedBorrowings.Count * 100, 1);
                                    <span>@onTimeCount/@returnedBorrowings.Count (@onTimePercentage%)</span>
                                }
                                else
                                {
                                    <span>N/A</span>
                                }
                            }
                        </div>
                    </div>
                    <div class="col-md-3">
                        <small class="text-muted">Unique Borrowers:</small>
                        <div class="text-light">
                            @Model.Select(b => b.UserId).Distinct().Count()
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>