@using LibraryManagementSystem.Entities
@model Borrowing

@{
    ViewData["Title"] = "Borrowing Details";
    var isAdmin = User.IsInRole("Admin");
    var isOwner = Model.UserId == int.Parse(User.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0");
}

<style>
    .borrowing-details-container {
        background: linear-gradient(135deg, #1a1a2e, #16213e);
        min-height: 100vh;
        padding: 40px 0;
    }

    .details-card {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 20px;
        padding: 40px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        margin-bottom: 30px;
    }

    .book-cover {
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        transition: transform 0.3s ease;
    }

    .book-cover:hover {
        transform: scale(1.05);
    }

    .status-badge {
        padding: 8px 16px;
        border-radius: 25px;
        font-weight: 600;
        font-size: 14px;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .status-active {
        background: linear-gradient(45deg, #28a745, #20c997);
        color: white;
    }

    .status-returned {
        background: linear-gradient(45deg, #6c757d, #495057);
        color: white;
    }

    .status-overdue {
        background: linear-gradient(45deg, #dc3545, #e74c3c);
        color: white;
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(220, 53, 69, 0); }
        100% { box-shadow: 0 0 0 0 rgba(220, 53, 69, 0); }
    }

    .timeline {
        position: relative;
        padding-left: 30px;
    }

    .timeline::before {
        content: '';
        position: absolute;
        left: 15px;
        top: 0;
        bottom: 0;
        width: 2px;
        background: linear-gradient(to bottom, #007bff, #6f42c1);
    }

    .timeline-item {
        position: relative;
        margin-bottom: 30px;
        padding: 20px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 15px;
        border-left: 4px solid #007bff;
    }

    .timeline-item::before {
        content: '';
        position: absolute;
        left: -37px;
        top: 25px;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: #007bff;
        border: 3px solid #1a1a2e;
    }

    .timeline-item.completed::before {
        background: #28a745;
    }

    .timeline-item.overdue::before {
        background: #dc3545;
        animation: pulse 1.5s infinite;
    }

    .info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin: 30px 0;
    }

    .info-item {
        background: rgba(255, 255, 255, 0.05);
        padding: 20px;
        border-radius: 15px;
        border-left: 4px solid #007bff;
        transition: transform 0.3s ease;
    }

    .info-item:hover {
        transform: translateY(-5px);
    }

    .info-item i {
        font-size: 24px;
        color: #007bff;
        margin-bottom: 10px;
    }

    .info-label {
        color: #adb5bd;
        font-size: 14px;
        text-transform: uppercase;
        letter-spacing: 1px;
        margin-bottom: 5px;
    }

    .info-value {
        color: #ffffff;
        font-size: 18px;
        font-weight: 600;
    }

    .action-buttons {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
        margin-top: 30px;
    }

    .btn-custom {
        padding: 12px 24px;
        border-radius: 25px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

    .btn-custom::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        transform: translate(-50%, -50%);
        transition: width 0.6s, height 0.6s;
    }

    .btn-custom:hover::before {
        width: 300px;
        height: 300px;
    }

    .btn-primary-custom {
        background: linear-gradient(45deg, #007bff, #0056b3);
        color: white;
    }

    .btn-success-custom {
        background: linear-gradient(45deg, #28a745, #1e7e34);
        color: white;
    }

    .btn-secondary-custom {
        background: linear-gradient(45deg, #6c757d, #545b62);
        color: white;
    }

    .btn-danger-custom {
        background: linear-gradient(45deg, #dc3545, #c82333);
        color: white;
    }

    .overdue-alert {
        background: linear-gradient(45deg, #dc3545, #e74c3c);
        color: white;
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 30px;
        border-left: 5px solid #ffffff;
        animation: slideInDown 0.5s ease;
    }

    @@keyframes slideInDown {
        from {
            transform: translateY(-30px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 20px;
    }

    .user-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: linear-gradient(45deg, #007bff, #6f42c1);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 24px;
        font-weight: bold;
    }

    .breadcrumb-custom {
        background: transparent;
        margin-bottom: 30px;
    }

    .breadcrumb-custom .breadcrumb-item a {
        color: #adb5bd;
        text-decoration: none;
    }

    .breadcrumb-custom .breadcrumb-item.active {
        color: #ffffff;
    }

    @@media (max-width: 768px) {
        .details-card {
            padding: 20px;
            margin: 15px;
        }

        .info-grid {
            grid-template-columns: 1fr;
        }

        .action-buttons {
            flex-direction: column;
        }
    }
</style>

<div class="borrowing-details-container">
    <div class="container">
        <!-- Breadcrumb -->
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb breadcrumb-custom">
                <li class="breadcrumb-item">
                    <a href="@Url.Action("Index", "Home")">
                        <i class="bi bi-house"></i> Home
                    </a>
                </li>
                @if (isAdmin)
                {
                    <li class="breadcrumb-item">
                        <a href="@Url.Action("Index", "Borrowing")">
                            <i class="bi bi-book"></i> All Borrowings
                        </a>
                    </li>
                }
                else
                {
                    <li class="breadcrumb-item">
                        <a href="@Url.Action("MyBorrowings", "Borrowing")">
                            <i class="bi bi-person-lines-fill"></i> My Borrowings
                        </a>
                    </li>
                }
                <li class="breadcrumb-item active" aria-current="page">
                    <i class="bi bi-info-circle"></i> Borrowing Details
                </li>
            </ol>
        </nav>

        <!-- Overdue Alert -->
        @if (Model.IsOverdue)
        {
            <div class="overdue-alert">
                <div class="d-flex align-items-center">
                    <i class="bi bi-exclamation-triangle-fill me-3" style="font-size: 24px;"></i>
                    <div>
                        <h5 class="mb-1"><strong>OVERDUE BOOK!</strong></h5>
                        <p class="mb-0">
                            This book is <strong>@Model.DaysOverdue day(s)</strong> overdue. 
                            Please return it as soon as possible to avoid additional fees.
                        </p>
                    </div>
                </div>
            </div>
        }

        <!-- Main Details Card -->
        <div class="details-card">
            <div class="row">
                <!-- Book Cover -->
                <div class="col-md-4 col-lg-3 text-center mb-4">
                    <img src="@($"/images/books/{Model.Book?.CoverImageUrl}")" 
                         alt="@Model.Book?.Title" 
                         class="book-cover img-fluid" 
                         style="max-height: 400px; width: 100%; object-fit: cover;" />
                    
                    <!-- Status Badge -->
                    <div class="mt-3">
                        @if (Model.IsOverdue)
                        {
                            <span class="status-badge status-overdue">
                                <i class="bi bi-exclamation-triangle"></i> Overdue
                            </span>
                        }
                        else if (Model.IsReturned)
                        {
                            <span class="status-badge status-returned">
                                <i class="bi bi-check-circle"></i> Returned
                            </span>
                        }
                        else
                        {
                            <span class="status-badge status-active">
                                <i class="bi bi-book"></i> Active
                            </span>
                        }
                    </div>
                </div>

                <!-- Book & Borrowing Info -->
                <div class="col-md-8 col-lg-9">
                    <!-- Book Title -->
                    <h1 class="text-light mb-3">@Model.Book?.Title</h1>
                    <h4 class="text-muted mb-4">by @Model.Book?.Author</h4>

                    <!-- User Info (Admin view) -->
                    @if (isAdmin)
                    {
                        <div class="user-info">
                            <div class="user-avatar">
                                @Model.User?.FirstName?.Substring(0, 1).ToUpper()
                            </div>
                            <div>
                                <h5 class="text-light mb-1">@Model.User?.FullName</h5>
                                <p class="text-muted mb-0">@Model.User?.Email</p>
                            </div>
                        </div>
                    }

                    <!-- Borrowing Information Grid -->
                    <div class="info-grid">
                        <div class="info-item">
                            <i class="bi bi-calendar-plus"></i>
                            <div class="info-label">Borrowed Date</div>
                            <div class="info-value">@Model.BorrowedDate.ToString("MMM dd, yyyy")</div>
                        </div>

                        <div class="info-item">
                            <i class="bi bi-calendar-x"></i>
                            <div class="info-label">Due Date</div>
                            <div class="info-value">@Model.DueDate.ToString("MMM dd, yyyy")</div>
                        </div>

                        @if (Model.IsReturned)
                        {
                            <div class="info-item">
                                <i class="bi bi-calendar-check"></i>
                                <div class="info-label">Returned Date</div>
                                <div class="info-value">@Model.ReturnedDate?.ToString("MMM dd, yyyy")</div>
                            </div>

                            <div class="info-item">
                                <i class="bi bi-clock"></i>
                                <div class="info-label">Borrowed Duration</div>
                                <div class="info-value">
                                    @((Model.ReturnedDate!.Value - Model.BorrowedDate).Days) days
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="info-item">
                                <i class="bi bi-clock"></i>
                                <div class="info-label">Days Borrowed</div>
                                <div class="info-value">
                                    @((DateTime.Now - Model.BorrowedDate).Days) days
                                </div>
                            </div>

                            @if (Model.IsOverdue)
                            {
                                <div class="info-item">
                                    <i class="bi bi-exclamation-triangle"></i>
                                    <div class="info-label">Days Overdue</div>
                                    <div class="info-value text-danger">
                                        @Model.DaysOverdue days
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="info-item">
                                    <i class="bi bi-hourglass-split"></i>
                                    <div class="info-label">Days Remaining</div>
                                    <div class="info-value">
                                        @((Model.DueDate - DateTime.Now).Days) days
                                    </div>
                                </div>
                            }
                        }
                    </div>

                    <!-- Timeline -->
                    <div class="mt-4">
                        <h5 class="text-light mb-3">
                            <i class="bi bi-clock-history"></i> Borrowing Timeline
                        </h5>
                        <div class="timeline">
                            <div class="timeline-item completed">
                                <h6 class="text-light mb-2">
                                    <i class="bi bi-calendar-plus"></i> Book Borrowed
                                </h6>
                                <p class="text-muted mb-1">@Model.BorrowedDate.ToString("MMMM dd, yyyy 'at' hh:mm tt")</p>
                                <small class="text-muted">Book successfully borrowed for 14 days</small>
                            </div>

                            @if (Model.IsReturned)
                            {
                                <div class="timeline-item completed">
                                    <h6 class="text-light mb-2">
                                        <i class="bi bi-calendar-check"></i> Book Returned
                                    </h6>
                                    <p class="text-muted mb-1">@Model.ReturnedDate?.ToString("MMMM dd, yyyy 'at' hh:mm tt")</p>
                                    <small class="text-muted">
                                        Book returned 
                                        @if ((Model.ReturnedDate!.Value - Model.DueDate).Days > 0)
                                        {
                                            <span class="text-danger">@((Model.ReturnedDate.Value - Model.DueDate).Days) days late</span>
                                        }
                                        else
                                        {
                                            <span class="text-success">on time</span>
                                        }
                                    </small>
                                </div>
                            }
                            else
                            {
                                <div class="timeline-item @(Model.IsOverdue ? "overdue" : "")">
                                    <h6 class="text-light mb-2">
                                        <i class="bi bi-calendar-x"></i> Due Date
                                    </h6>
                                    <p class="text-muted mb-1">@Model.DueDate.ToString("MMMM dd, yyyy")</p>
                                    <small class="@(Model.IsOverdue ? "text-danger" : "text-warning")">
                                        @if (Model.IsOverdue)
                                        {
                                            <span>Overdue by @Model.DaysOverdue day(s)</span>
                                        }
                                        else
                                        {
                                            <span>@((Model.DueDate - DateTime.Now).Days) day(s) remaining</span>
                                        }
                                    </small>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="action-buttons">
                        @if (!Model.IsReturned && (isOwner || isAdmin))
                        {
                            <form asp-action="Return" asp-controller="Borrowing" method="post" class="d-inline">
                                <input type="hidden" name="bookId" value="@Model.BookId" />
                                <button type="submit" class="btn btn-custom btn-success-custom" 
                                        onclick="return confirm('Are you sure you want to return this book?')">
                                    <i class="bi bi-check-circle"></i> Return Book
                                </button>
                            </form>
                        }

                        <a href="@Url.Action("Details", "Book", new { id = Model.BookId })" 
                           class="btn btn-custom btn-primary-custom">
                            <i class="bi bi-book"></i> View Book Details
                        </a>

                        @if (isAdmin)
                        {
                            <a href="@Url.Action("BookHistory", "Borrowing", new { bookId = Model.BookId })" 
                               class="btn btn-custom btn-secondary-custom">
                                <i class="bi bi-clock-history"></i> Book History
                            </a>

                            <a href="@Url.Action("Index", "Borrowing")" 
                               class="btn btn-custom btn-secondary-custom">
                                <i class="bi bi-arrow-left"></i> Back to All Borrowings
                            </a>
                        }
                        else
                        {
                            <a href="@Url.Action("MyBorrowings", "Borrowing")" 
                               class="btn btn-custom btn-secondary-custom">
                                <i class="bi bi-arrow-left"></i> Back to My Borrowings
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(Model.Book?.Description))
        {
            <!-- Book Description Card -->
            <div class="details-card">
                <h5 class="text-light mb-3">
                    <i class="bi bi-journal-text"></i> Book Description
                </h5>
                <p class="text-muted">@Model.Book.Description</p>
            </div>
        }

        <!-- Additional Book Info -->
        <div class="details-card">
            <h5 class="text-light mb-3">
                <i class="bi bi-info-circle"></i> Additional Information
            </h5>
            <div class="info-grid">
                <div class="info-item">
                    <i class="bi bi-calendar3"></i>
                    <div class="info-label">Published Date</div>
                    <div class="info-value">@Model.Book?.PublishedDate.ToString("MMMM yyyy")</div>
                </div>

                <div class="info-item">
                    <i class="bi bi-stack"></i>
                    <div class="info-label">Copies Available</div>
                    <div class="info-value">@Model.Book?.CopiesAvailable</div>
                </div>

                <div class="info-item">
                    <i class="bi bi-hash"></i>
                    <div class="info-label">Borrowing ID</div>
                    <div class="info-value">#@Model.Id.ToString("D6")</div>
                </div>

                @if (isAdmin)
                {
                    <div class="info-item">
                        <i class="bi bi-person"></i>
                        <div class="info-label">User ID</div>
                        <div class="info-value">#@Model.UserId.ToString("D6")</div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Add some interactive functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Animate timeline items on scroll
            const timelineItems = document.querySelectorAll('.timeline-item');
            
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.animation = 'slideInLeft 0.6s ease forwards';
                    }
                });
            });

            timelineItems.forEach(item => {
                observer.observe(item);
            });

            // Add hover effects to info items
            const infoItems = document.querySelectorAll('.info-item');
            infoItems.forEach(item => {
                item.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-5px) scale(1.02)';
                });
                
                item.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0) scale(1)';
                });
            });
        });

        @@keyframes slideInLeft {
            from {
                transform: translateX(-30px);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    </script>
}
